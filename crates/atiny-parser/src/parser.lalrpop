use std::str::FromStr;

use atiny_tree::r#abstract::*;
use atiny_location::*;

grammar(id: NodeId);

#[inline]
Loc<T>: Located<T> = {
    <s: @L> <data: T> <e: @R> => Located { data, location: ByteRange(Byte(s), Byte(e), id) }
}

//         (Vec,Trailing)
#[inline]
Sep<U, T>: (Vec<T>, bool) = {
    <mut v:(<T> U)*> <e:T?> => match e {
        Some(e) => {
            v.push(e);
            (v, false)
        }
        None => (v, true)
    }
}

#[inline]
BlockList<U, T>: Vec<T> = {
    r"[{][\s]*[}]"      => Vec::new(),
    "{" <Sep<U, T>> "}" => <>.0
}

Path: (Vec<Located<String>>, Located<String>) = {
    <s:Loc<UpperId>> <e:("::" <Loc<LowerId>>)> => {
        (vec![s], e)
    },

    <s:Loc<UpperId>> <mut v:("::" <Loc<UpperId>>)+> <e:("::" <Loc<LowerId>>)?> => match e {
        Some(e) => {
            let mut res = vec![s];
            res.extend(v);
            (res, e)
        }

        None => {
            let e = v.pop().unwrap();
            let mut res = vec![s];
            res.extend(v);
            (res, e)
        }
    },
}

// O: From<AtomKind<O>>
AtomItem<I, O> : O = {
    "_" => AtomKind::Wildcard.into(),
    Num => AtomKind::Number(<>).into(),
    Id  => AtomKind::Identifier(<>).into(),
    Path => AtomKind::PathItem(Path(Qualifier(<>.0), <>.1)).into(),
    "(" <mut sep:Sep<",", I>> ")" => {
        let (mut vec, trailing) = sep;

        match vec.len() {
            0 => AtomKind::unit().into(),
            1 if !trailing => vec.pop().unwrap().data,
            _ => AtomKind::Tuple(vec).into(),
        }
    },
}

// For expressions

AtomExpr: Expr = Loc<AtomItem<Expression, InnerItem>>;

CallItem: ExprKind = {
    <t:CallTerm> <a:AtomExpr> => ExprKind::Application(Box::new(t), Box::new(a)),
}

CallTerm: Expr = {
    Call,
    Loc<AbsExpr<BlockExpr>>,
    Loc<AbsExpr<MatchExpr<ExprItem>>>,
}

Call: Expr = {
    Loc<CallItem>,
    AtomExpr
}

RecordExpr: ExprKind = {
    <t:Call> <f:BlockList<",", ExprField>> => ExprKind::RecordCreation(Box::new(t), f)
}

MatchExpr<E>: ExprKind = {
    "match" <e:Loc<E>> <c:BlockList<",", Clause>> => ExprKind::Match(Box::new(e), c),
}

#[inline]
AbsExpr<E>: ExprKind = {
    "|" <t:LowerId> "|" <e:Loc<E>> => ExprKind::Abstraction(t, Box::new(e)),
}

IfLetExpr<E>: ExprKind = {
    "if" "let" <Pattern> "=" <Loc<E>>
        <Loc<BlockExpr>> "else" <Loc<BlockExpr>> => ExprKind::if_let(<>),
}

InnerItem: ExprKind = {
    <f:AtomExpr> "." <name:LowerId> => ExprKind::Field(Box::new(f), name),
    <f:Call> <t:TypeAnotation>      => ExprKind::Annotation(Box::new(f), Box::new(t)),
}

Statement: StatementKind = {
    "let" <Pattern> "=" <Expression> => StatementKind::Let(<>),
    Expression => StatementKind::Expr(<>)
}

Block: Vec<Statement> = BlockList<";", Loc<Statement>>;

BlockExpr: ExprKind = Loc<Block> => ExprKind::Block(if <>.data.is_empty() {
    let loc = <>.location;
    vec![StatementKind::Expr(ExprKind::Atom(AtomKind::unit()).loc(loc)).loc(loc)]
} else {
    <>.data
});

#[inline]
Term: ExprKind = {
    InnerItem,
    BlockExpr,
    Call => <>.data
}

InfixItem<Left, Infix, Right>: ExprKind = Loc<Left> Loc<Infix> Loc<Right> => ExprKind::infix(<>, id);

#[inline]
InfixExpr<Left, Infix, Right>: ExprKind = {
    InfixItem<Left, Infix, Right>,
    Right,
}

Infix: &'input str = {
    "*" => "mul",
    "/" => "div",
}

Infix2: &'input str = {
    "+" => "add",
    "-" => "sub",
}

Indirect<T> = T;

#[inline]
Factor: ExprKind = InfixExpr<Indirect<Factor>, Infix, Term>;

#[inline]
Factor2: ExprKind = InfixExpr<Indirect<Factor2>, Infix2, Factor>;

#[inline]
ExprItem: ExprKind = {
    Factor2,
    RecordExpr,
}

InnerExpr: ExprKind = {
    ExprItem,
    MatchExpr<ExprItem>,
    IfLetExpr<ExprItem>,

    //Todo: report useless constructions
    MatchExpr<AbsExpr<ExprItem>>,
    IfLetExpr<AbsExpr<ExprItem>>
}

OuterExpr: ExprKind = {
    InnerExpr,
    AbsExpr<OuterExpr>,
}

pub Expression: Expr = Loc<OuterExpr>;

// For Patterns

AtomPattern: Pattern = Loc<AtomItem<Pattern, PatternItem>>;

PatternItem: PatternKind = UpperId AtomPattern+ => PatternKind::Constructor(<>);

Pattern: Pattern = {
    Loc<PatternItem>,
    AtomPattern
}

Clause: Clause = <Pattern> "=>" <Expression> => Clause::new(<>);

ExprField: ExprField = <name: LowerId> "=" <expr: Expression> => ExprField {<>};

// For Types

TypePath: Path = {
    <a:(<Loc<UpperId>> "::")+> <b:Loc<UpperId>> => Path(Qualifier(a), b)
}

TypeAtomItem: TypeKind = {
    <name: Id> => TypeKind::Variable(VariableNode {<>}),
    TypePath => TypeKind::Path(<>),
    "(" <mut sep:Sep<",", TypeNode>> ")" => {
        let (mut types, trailing) = sep;

        match types.len() {
            0 => TypeKind::unit(),
            1 if !trailing => types.pop().unwrap().data,
            _ => TypeKind::Tuple(TypeTupleNode { types }),
        }
    }
}

TypeAtom: TypeNode = Loc<TypeAtomItem>;

TypeCallItem: TypeKind = {
    <fun:Loc<UpperId>> <args:TypeAtom+> => TypeKind::Application(TypeApplicationNode {
        fun: Path(Qualifier(Vec::new()), fun),
        args
    }),

    <fun:TypePath> <args:TypeAtom+> => TypeKind::Application(TypeApplicationNode {
        fun,
        args
    })
}

TypeCall: TypeNode = {
    Loc<TypeCallItem>,
    TypeAtom
}

TypeArrowItem: TypeKind = <TypeCall> "->" <TypeNode> => TypeKind::Arrow(ArrowNode::new(<>));

TypeArrow: TypeNode = {
    Loc<TypeArrowItem>,
    TypeCall
}

TypeKind: TypeKind = {
    "forall" <args: LowerId*> "." <body: TypeNode> => {
        TypeKind::Forall(ForallNode { args, body: Box::new(body) })
    }
}

TypeNode: TypeNode = {
    Loc<TypeKind>,
    TypeArrow
}

// Top level

Constructor: Constructor = "|" <name: UpperId> <types: TypeAtom*> => Constructor {<>};

Field: Field = <name: LowerId> ":" <ty: TypeNode> => Field {<>};

TypeDeclKind: TypeDeclKind = {
    Constructor+          => TypeDeclKind::Sum(<>),
    BlockList<",", Field> => TypeDeclKind::Product(<>)
}

TypeDecl: TypeDecl = {
    "type" <name: UpperId> <params: LowerId*> "=" <constructors: TypeDeclKind> => TypeDecl {<>}
}

TypeAnotation: TypeNode = ":" <TypeNode>;

Param: (Pattern, TypeNode) = "(" <Pattern> <TypeAnotation> ")" => (<>);

FnDecl: FnDecl = "fn" <Loc<LowerId>> <Param*> <TypeAnotation?> <Loc<BlockExpr>> => FnDecl::new(<>);

UsePath: (Vec<Located<String>>, Option<Located<String>>) = {
    <a:(<Loc<UpperId>> "::")+> <b:Loc<Id>>  => (a, Some(b)),
    <a:(<Loc<UpperId>> "::")+> <b:Loc<"*">> => (a, Some(b.map(|star| star.to_string()))),
    <Loc<UpperId>> => (vec![<>], None)
}

UseDecl: UseDecl = "use" <UsePath> => UseDecl(Qualifier(<>.0), <>.1);

TopLevelKind: TopLevelKind = {
    FnDecl   => TopLevelKind::FnDecl(<>), 
    TypeDecl => TopLevelKind::TypeDecl(<>),
    UseDecl  => TopLevelKind::UseDecl(<>),
}

TopLevel: TopLevel = Loc<TopLevelKind>;

pub Program: Vec<TopLevel> = TopLevel*;

Num: u64 = r"[0-9]+" => u64::from_str(<>).unwrap();

LowerId: String =  {
    r"[a-z]"               => <>.to_string(),
    r"[a-z_][a-zA-Z0-9_]+" => <>.to_string(),
}

UpperId: String = r"[A-Z][a-zA-Z0-9_]*" => <>.to_string();

Id: String = {
    LowerId,
    UpperId,
}

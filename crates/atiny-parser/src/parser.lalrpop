use std::str::FromStr;

use atiny_tree::r#abstract::*;
use atiny_location::*;

grammar;

Loc<T>: Located<T> = {
    <s: @L> <data: T> <e: @R> => Located { data, location: ByteRange(Byte(s), Byte(e)) }
}

//         (Vec,Trailing)
#[inline]
Sep<U, T>: (Vec<T>, bool) = {
    <mut v:(<T> U)*> <e:T?> => match e {
        Some(e) => {
            v.push(e);
            (v, false)
        }
        None => (v, true)
    }
};

BlockList<U, T>: Vec<T> = "{" <Sep<U, T>> "}"  => <>.0;

Path: (Vec<Located<String>>, Located<String>) = {
    <s:Loc<UpperId>> <e:("::" <Loc<LowerId>>)> => {
        (vec![s], e)
    },

    <s:Loc<UpperId>> <mut v:("::" <Loc<UpperId>>)+> <e:("::" <Loc<LowerId>>)?> => match e {
        Some(e) => {
            let mut res = vec![s];
            res.extend(v);
            (res, e)
        }

        None => {
            let e = v.pop().unwrap();
            let mut res = vec![s];
            res.extend(v);
            (res, e)
        }
    },
};

// O: From<AtomKind<O>>
AtomItem<I, O> : O = {
    "_" => AtomKind::Wildcard.into(),
    Num => AtomKind::Number(<>).into(),
    Id  => AtomKind::Identifier(<>).into(),
    Path => AtomKind::Path(Qualifier(<>.0), <>.1).into(),
    "(" <mut sep:Sep<",", I>> ")" => {
        let (mut vec, trailing) = sep;

        match vec.len() {
            0 => AtomKind::unit().into(),
            1 if !trailing => vec.pop().unwrap().data,
            _ => AtomKind::Tuple(vec).into(),
        }
    },
}

// For expressions

AtomExpr: Expr = Loc<AtomItem<Expr, ExprItem>>;

CallItem: ExprKind = <t:Call> <a:AtomExpr> => ExprKind::Application(Box::new(t), Box::new(a));

Call: Expr = {
    Loc<CallItem>,
    AtomExpr
};

Item<E>: ExprKind = {
    "if" "let" <Pattern> "=" <E>
        <BlockExpr> "else" <BlockExpr>       => ExprKind::if_let(<>),
    "|" <t:LowerId> "|" <e:E>                => ExprKind::Abstraction(t, Box::new(e)),
    "match" <e:E> <c:BlockList<",", Clause>> => ExprKind::Match(Box::new(e), c),
} 

ExprItem: ExprKind = {
    Item<InnerExpr>,
    <f:AtomExpr> "." <name:LowerId> => ExprKind::Field(Box::new(f), name),
    <f:Call> <t:TypeAnotation>      => ExprKind::Annotation(Box::new(f), Box::new(t)),
};

Statement: StatementKind = {
    "let" <Pattern> "=" <Expr> => StatementKind::Let(<>),
    Expr => StatementKind::Expr(<>)
}

Block: Vec<Statement> = {
    Loc<r"[{][\s]*[}]"> => vec![<>.clone().map(|_| StatementKind::Expr(<>.map(|_| ExprKind::Atom(AtomKind::unit()))))],
    BlockList<";", Loc<Statement>>
};

BlockExpr: Expr = Loc<Block> => <>.map(|block|  ExprKind::Block(block));

#[inline]
InnerExpr: Expr = {
    Loc<ExprItem>,
    BlockExpr,
    Call,
}

RecordItem: ExprKind = {
    <t:Call> <f:BlockList<",", ExprField>> => ExprKind::RecordCreation(Box::new(t), f)
}

OuterItem: ExprKind = Item<Loc<RecordItem>>;

Term: Expr = {
    Loc<OuterItem>,
    Loc<RecordItem>,
    InnerExpr,
};

InfixItem<Left, Infix, Right>: ExprKind = Left Loc<Infix> Right => ExprKind::infix(<>);

InfixExpr<Left, Infix, Right>: Expr = {
    Loc<InfixItem<Left, Infix, Right>>,
    Right,
}

pub Expr: Expr = InfixExpr<Expr, Infix0, Factor>;

Factor: Expr = InfixExpr<Factor, Infix1, Term>;

Infix0: &'input str = {
    "+" => "add",
    "-" => "sub",
}

Infix1: &'input str = {
    "*" => "mul",
    "/" => "div",
}

AtomPattern: Pattern = Loc<AtomItem<Pattern, PatternItem>>;

PatternItem: PatternKind = UpperId AtomPattern+ => PatternKind::Constructor(<>);

Pattern: Pattern = {
    Loc<PatternItem>,
    AtomPattern
};

Clause: Clause = <Pattern> "=>" <Expr> => Clause::new(<>);

ExprField: ExprField = <name: LowerId> "=" <expr: Expr> => ExprField {<>};

// For Types

TypeAtomItem: TypeKind = {
    <name: Id> => TypeKind::Variable(VariableNode {<>}),
    "(" <mut sep:Sep<",", TypeNode>> ")" => {
        let (mut types, trailing) = sep;

        match types.len() {
            0 => TypeKind::unit(),
            1 if !trailing => types.pop().unwrap().data,
            _ => TypeKind::Tuple(TypeTupleNode { types }),
        }
    }
}

TypeAtom: TypeNode = Loc<TypeAtomItem>;

TypeCallItem: TypeKind = {
    <fun:UpperId> <args:TypeAtom+> => TypeKind::Application(TypeApplicationNode {<>}),
}

TypeCall: TypeNode = {
    Loc<TypeCallItem>,
    TypeAtom
};

TypeArrowItem: TypeKind = <TypeCall> "->" <TypeNode> => TypeKind::Arrow(ArrowNode::new(<>));

TypeArrow: TypeNode = {
    Loc<TypeArrowItem>,
    TypeCall
};

TypeKind: TypeKind = {
    "forall" <args: LowerId*> "." <body: TypeNode> => {
        TypeKind::Forall(ForallNode { args, body: Box::new(body) })
    }
}

TypeNode: TypeNode = {
    Loc<TypeKind>,
    TypeArrow
};

// Top level

Constructor: Constructor = "|" <name: UpperId> <types: TypeAtom*> => Constructor {<>};

Field: Field = <name: LowerId> ":" <ty: TypeNode> => Field {<>};

TypeDeclKind: TypeDeclKind = {
    Constructor+          => TypeDeclKind::Sum(<>),
    BlockList<",", Field> => TypeDeclKind::Product(<>)
}

TypeDecl: TypeDecl = {
    "type" <name: UpperId> <params: LowerId*> "=" <constructors: TypeDeclKind> => TypeDecl {<>}
}

TypeAnotation: TypeNode = ":" <TypeNode>;

Param: (Pattern, TypeNode) = "(" <Pattern> <TypeAnotation> ")" => (<>);

FnDecl: FnDecl = "fn" <Loc<LowerId>> <Param*> <TypeAnotation?> <BlockExpr> => FnDecl::new(<>);

UsePath: (Vec<Located<String>>, Option<Located<String>>) = {
    <a:(<Loc<UpperId>> "::")+> <b:Loc<Id>> => (a, Some(b)),
    <a:(<Loc<UpperId>> "::")+> <b:Loc<"*">> => (a, Some(b.map(|star| star.to_string()))),
    <Loc<UpperId>> => (vec![<>], None)
};

UseDecl: UseDecl = "use" <UsePath> => UseDecl(Qualifier(<>.0), <>.1);

TopLevelKind: TopLevelKind = {
    FnDecl   => TopLevelKind::FnDecl(<>), 
    TypeDecl => TopLevelKind::TypeDecl(<>),
    UseDecl  => TopLevelKind::UseDecl(<>),
}

TopLevel: TopLevel = Loc<TopLevelKind>;

pub Program: Vec<TopLevel> = TopLevel*;

Num: u64 = r"[0-9]+" => u64::from_str(<>).unwrap();

LowerId: String =  {
    r"[a-z]"               => <>.to_string(),
    r"[a-z_][a-zA-Z0-9_]+" => <>.to_string(),
}

UpperId: String = r"[A-Z][a-zA-Z0-9_]*" => <>.to_string();

Id: String = {
    LowerId,
    UpperId,
}
